name: Static Website Deployment

on:
  push:
    paths:
      - 'templates/static-website/frontend/**'
      - 'templates/static-website/terraform/**'
  workflow_dispatch:

env:
  TF_VAR_aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws-region: ${{ secrets.AWS_REGION }}
  TF_VAR_root-domain: 'dmitrygrinko.com'
  TF_VAR_subdomain-name: 'test'
  TF_VAR_bucket-name: 'test.dmitrygrinko.com'
  TF_VAR_project-name: 'static-website'
  TF_VAR_environment: 'dev'

permissions:
  id-token: write
  contents: read

jobs:
  # infrastructure:
  #   name: Deploy Infrastructure
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.5.0"

  #     - name: Terraform Format
  #       working-directory: templates/static-website/terraform
  #       run: terraform fmt -check

  #     - name: Terraform Init
  #       working-directory: templates/static-website/terraform
  #       run: terraform init

  #     - name: Terraform Apply
  #       working-directory: templates/static-website/terraform
  #       if: github.ref == 'refs/heads/main'
  #       run: terraform apply -auto-approve

  # deploy-content:
  #   name: Deploy Website Content
  #   needs: infrastructure
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Deploy to S3
  #       run: |
  #         aws s3 sync templates/static-website/frontend/ s3://${{ env.TF_VAR_bucket-name }}/ \
  #           --delete \
  #           --cache-control "max-age=3600"

  destroy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Clean up S3 bucket
        run: |
          chmod +x templates/static-website/scripts/cleanup.sh
          source templates/static-website/scripts/cleanup.sh
          delete_s3_bucket "${{ env.TF_VAR_bucket-name }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform -chdir=templates/static-website/terraform init

      - name: Terraform Destroy
        run: terraform -chdir=templates/static-website/terraform destroy -auto-approve 